<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>python on home</title>
    <link>https://okawak.github.io/tags/python/</link>
    <description>Recent content in python on home</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Wed, 18 Oct 2023 16:33:52 +0900</lastBuildDate><atom:link href="https://okawak.github.io/tags/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>ピークフィッティングまとめ</title>
      <link>https://okawak.github.io/posts/2023/peak_fitting/</link>
      <pubDate>Wed, 18 Oct 2023 16:33:52 +0900</pubDate>
      
      <guid>https://okawak.github.io/posts/2023/peak_fitting/</guid>
      <description>追記: curve_fitについて追記しました。
普段ROOTを使って解析していますが、物理解析に特化しており一般的ではないと思います。 特に有用なデータ処理に対してpythonを用いて同じことができれば良いなということで、特にピークフィットについて調べました。
環境について 見出しへのリンク テストデータを用いた実験は以下のマシンで行いました。
&amp;gt; sw_vers ProductName:	macOS ProductVersion:	13.6 BuildVersion:	22G120 &amp;gt; uname -v Darwin Kernel Version 22.6.0: Fri Sep 15 13:41:30 PDT 2023; root:xnu-8796.141.3.700.8~1/RELEASE_ARM64_T8103 ROOTのバージョンは、
&amp;gt; root --version ROOT Version: 6.28/06 Built for macosxarm64 on Aug 28 2023, 11:29:15 From tags/v6-28-06@v6-28-06 python 3.11.6を用い、パッケージのバージョンはgithubにあるrequirements.txtを参照してください。
今回の記事ではデータの例として、Ge検出器で$^{133}$Baのガンマ線を測定したデータを用いようと思います。 データ構造としては最も単純と考えられる、テキストファイルが与えられているとします。 例えば、0chから順に、
1 10 1000 233 0 のような一列になっているファイルを考えます。
ROOTでの解析 見出しへのリンク fit.Cという名前のマクロを用いて解析します。
データの読み込み 見出しへのリンク ROOTのTH1にはテキストファイルから直接TH1オブジェクトを生成するコンストラクタは無さそう(あったら教えてください&amp;hellip;)なので、 一行ずつ読み込ませてヒストグラムにセットしていきます。 また、4096チャンネル(12ビット)を仮定しています。
まず、単純にヒストグラムを表示させるマクロは以下の通りに書けます。
void fit(TString text_data=&amp;#34;&amp;#34;){ ifstream fin(text_data); if(!</description>
    </item>
    
    <item>
      <title>pipやrequirements.txtについての備忘録</title>
      <link>https://okawak.github.io/posts/2023/python_requirement/</link>
      <pubDate>Wed, 11 Oct 2023 13:48:38 +0900</pubDate>
      
      <guid>https://okawak.github.io/posts/2023/python_requirement/</guid>
      <description>python環境をvenvを使って作成する際、必要なパッケージなどをrequirements.txtで管理するようにしている。
githubにソースを置いておくと時々セキュリティ面からパッケージをアップグレードするようにと連絡がくるため、 必要なコマンド等を忘れないようにメモしておく。
随時メモしておくべきことがあれば更新します。
基本的な使い方 見出しへのリンク pipでパッケージを一括でインストールする 見出しへのリンク pip install -r requirements.txt 現在の環境をrequirements.txtに書き出す 見出しへのリンク pip freeze &amp;gt; requirements.txt リダイレクトの設定が上書き禁止になっている場合 （「noclobber」がonになっている場合。この設定はset -o | grep noclobberなどで確認できる）、 このコマンドでは新たなファイルを作成することはできない。 強制的に上書きするには次のようにする。
pip freeze &amp;gt;| requirements.txt パッケージのアップグレード 見出しへのリンク pipで一つずつアップグレード 見出しへのリンク pip install -U PackageName # or pip install --upgrade PackageName awkを用いて一括アップグレード 見出しへのリンク まず、pipで更新可能なパッケージを確認するには、
pip list -o で確認できる。この出力を用いて一括アップデートするコマンドは以下の通りである。
pip list -o | tail -n +3 | awk &amp;#39;{ print $1 }&amp;#39; | xargs pip install -U これは、pip list -oで出力されるパッケージについて、tail -n +3でパッケージ部分のみを取り出して（3行目から表示させるという意味）、 awk &#39;{print $1}&#39;で一列目を取り出し（パッケージの名前）、これらをpip install -Uするという処理になっている。</description>
    </item>
    
  </channel>
</rss>
