<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>home</title>
    <link>https://okawak.github.io/</link>
    <description>Recent content on home</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Sun, 12 Nov 2023 15:59:24 +0900</lastBuildDate>
    <atom:link href="https://okawak.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>近況報告</title>
      <link>https://okawak.github.io/posts/2023/diary11_12/</link>
      <pubDate>Sun, 12 Nov 2023 15:59:24 +0900</pubDate>
      <guid>https://okawak.github.io/posts/2023/diary11_12/</guid>
      <description>最近やったことや調べたことをメモします。 忘れないように書いているだけなので有用な情報はないかもです。
Pythonの環境について 見出しへのリンク pythonを実行するとき、どの環境でするべきかをいつも悩んでいて、よく python -m venv .venvを使っていましたが、もっと良いものはないかと探していたところ、おそらく良い方法は以下の2つかなと思っています。
docker poetry dockerについて 見出しへのリンク 一番良いのはこれだと思いますが、昔dockerを触ったとき、メモリに関してエラーが起こったりよく調べないまま使っていたりしており、苦手意識があってまだ手が出せていません…
dockerを使って開発している人に聞くと、開発用、デプロイ用に環境を分けたり、サクッと環境を持ってくるのにも楽でとても便利だということを聞いたのでそろそろ調べてみようかなと思ったりしてます。 dockerの中の環境と、localな環境での連携がどうなってるのか自分の中でクリアーになれば今後導入していきたいです。
なのでpythonのツールを作成するときも、dockerをベースに作成するのが良さそうです。
poetryについて 見出しへのリンク dockerを使わないで、仮想環境を整える場合&amp;ldquo;poetry&amp;rdquo;というものを使うのが便利そうです。
最近Rust言語も勉強しているのですが、そのcargoに近いことをこのpoetryがやってくれるっぽいです。(違ったらすみません…) 以前作成した&amp;quot;send_runsummary&amp;quot;というツールもpoetryで管理するように修正してみました。(クラスにするなど細かい修正も行なっています)
以前のソース(Gitlab) 新しいソース(Github) コマンドに慣れてしまえばかなり良さそうです。
shellscriptについて 見出しへのリンク 最近は普通のコード(PythonとかC++)ではなくシェルスクリプトを色々書いてます。 調べれば調べるほど、実は複雑で難しいんだなと実感します。
時間があれば有用な知識について記事にまとめられればなと思ってます。
ブラウザについて 見出しへのリンク 今まではsidekickというブラウザを使っていました。 これはサイドバーにアプリを置くことができて、特にgmailがおけて通知も来るのですごく便利でした。 仕様の詳細は検索してみてください。 かなり良いブラウザだと思います。
ただいつからか無料アカウントに機能の制限がきてしまい、他のブラウザに乗り換えようかなと思うようになりました。 色々調べている中で、
vivaldi arc の二つが良さそうだったので、試してみました。
vivaldiについて 見出しへのリンク すみません、ほぼ1日しか触っていないので詳細には述べられませんが、結論から言うと自分にはあっていなかったです。 めちゃくちゃカスタマイズできることがこのブラウザの売りのようで、その点はすごく気に入りました。 しかし、sidekickになれていたため、サイドバーにアプリがおけ、さらにそれがアクティブになる(うまく説明するのが難しいですが、サイドバーからアプリを開き、色々操作した後に、別のタブに行き、また戻ってきた際にその操作後の状態を維持している) というのが便利で、それが難しそうでした。
ちゃんと調べればそういった機能も使えるのかもしれないですが、気がついたらsidekickに戻ってしまい、vivaldiを使わなくなってしまいました…
arcについて 見出しへのリンク ArcというブラウザはmacOSのみに対応しているブラウザで、比較的最近開発されたブラウザだそうです。 結論から言うとかなり良いです！
homebrewでインストールできますし、sidekickで行なっていたこともそのままできて感触としてはこれからも使っていきたいとなっています。 一点、gmailの通知(新しいメールが来たときにつく、右上の数字)が現れないことが、ちょっとなと思っているところですが、 その他の機能は問題なく使えています。 特徴的な点として、タブが上部ではなく横につくと言う点がありますが、慣れれば問題ないです。 ブラウザは縦に情報が伸びているので、上にタブがないことで、一度の画面で多くの情報が見れるのでかなり良いです。(これは他のブラウザでも設定できますが…)
まだまだショートカットキーなど使いこなせていない機能もありますが、しばらく使ってから有用な機能など紹介できたらなと思っています。
基本情報技術者試験について 見出しへのリンク 基本情報の試験を受けてきました。 ちょっとしか勉強できていなかったのでギリギリの合格ラインでした。
感想としては、この基本情報の知識を持っていても(特に研究に関しては)実務にはあまり関係ないかもと思いました。 就活するときには便利な資格のようにも思うので取ってよかったと思いますが、 時間があれば応用情報とかLPICのような資格も取ろうかなと思ったり思わなかったり。
AWSについて 見出しへのリンク 今まで全くAWSに触れたことがなかったのですが、ついにこれからAWSを触る機会ができそうです。 前々からどんなものなのか気になっていたので、色々進めながらAWSの勉強もしていきたいなと思っています。</description>
    </item>
    <item>
      <title>ピークフィッティングまとめ</title>
      <link>https://okawak.github.io/posts/2023/peak_fitting/</link>
      <pubDate>Wed, 18 Oct 2023 16:33:52 +0900</pubDate>
      <guid>https://okawak.github.io/posts/2023/peak_fitting/</guid>
      <description>追記: curve_fitについて追記しました。
普段ROOTを使って解析していますが、物理解析に特化しており一般的ではないと思います。 特に有用なデータ処理に対してpythonを用いて同じことができれば良いなということで、特にピークフィットについて調べました。
環境について 見出しへのリンク テストデータを用いた実験は以下のマシンで行いました。
&amp;gt; sw_vers ProductName:	macOS ProductVersion:	13.6 BuildVersion:	22G120 &amp;gt; uname -v Darwin Kernel Version 22.6.0: Fri Sep 15 13:41:30 PDT 2023; root:xnu-8796.141.3.700.8~1/RELEASE_ARM64_T8103 ROOTのバージョンは、
&amp;gt; root --version ROOT Version: 6.28/06 Built for macosxarm64 on Aug 28 2023, 11:29:15 From tags/v6-28-06@v6-28-06 python 3.11.6を用い、パッケージのバージョンはgithubにあるrequirements.txtを参照してください。
今回の記事ではデータの例として、Ge検出器で$^{133}$Baのガンマ線を測定したデータを用いようと思います。 データ構造としては最も単純と考えられる、テキストファイルが与えられているとします。 例えば、0chから順に、
1 10 1000 233 0 のような一列になっているファイルを考えます。
ROOTでの解析 見出しへのリンク fit.Cという名前のマクロを用いて解析します。
データの読み込み 見出しへのリンク ROOTのTH1にはテキストファイルから直接TH1オブジェクトを生成するコンストラクタは無さそう(あったら教えてください&amp;hellip;)なので、 一行ずつ読み込ませてヒストグラムにセットしていきます。 また、4096チャンネル(12ビット)を仮定しています。
まず、単純にヒストグラムを表示させるマクロは以下の通りに書けます。
void fit(TString text_data=&amp;#34;&amp;#34;){ ifstream fin(text_data); if(!</description>
    </item>
    <item>
      <title>pipやrequirements.txtについての備忘録</title>
      <link>https://okawak.github.io/posts/2023/python_requirement/</link>
      <pubDate>Wed, 11 Oct 2023 13:48:38 +0900</pubDate>
      <guid>https://okawak.github.io/posts/2023/python_requirement/</guid>
      <description>python環境をvenvを使って作成する際、必要なパッケージなどをrequirements.txtで管理するようにしている。
githubにソースを置いておくと時々セキュリティ面からパッケージをアップグレードするようにと連絡がくるため、 必要なコマンド等を忘れないようにメモしておく。
随時メモしておくべきことがあれば更新します。
基本的な使い方 見出しへのリンク pipでパッケージを一括でインストールする 見出しへのリンク pip install -r requirements.txt 現在の環境をrequirements.txtに書き出す 見出しへのリンク pip freeze &amp;gt; requirements.txt リダイレクトの設定が上書き禁止になっている場合 （「noclobber」がonになっている場合。この設定はset -o | grep noclobberなどで確認できる）、 このコマンドでは新たなファイルを作成することはできない。 強制的に上書きするには次のようにする。
pip freeze &amp;gt;| requirements.txt パッケージのアップグレード 見出しへのリンク pipで一つずつアップグレード 見出しへのリンク pip install -U PackageName # or pip install --upgrade PackageName awkを用いて一括アップグレード 見出しへのリンク まず、pipで更新可能なパッケージを確認するには、
pip list -o で確認できる。この出力を用いて一括アップデートするコマンドは以下の通りである。
pip list -o | tail -n +3 | awk &amp;#39;{ print $1 }&amp;#39; | xargs pip install -U これは、pip list -oで出力されるパッケージについて、tail -n +3でパッケージ部分のみを取り出して（3行目から表示させるという意味）、 awk &#39;{print $1}&#39;で一列目を取り出し（パッケージの名前）、これらをpip install -Uするという処理になっている。</description>
    </item>
    <item>
      <title>hugoで新しい記事を作成する</title>
      <link>https://okawak.github.io/posts/2023/new_post/</link>
      <pubDate>Sun, 08 Oct 2023 12:32:08 +0900</pubDate>
      <guid>https://okawak.github.io/posts/2023/new_post/</guid>
      <description>初めて記事を投稿させていただきます。 今回は、hugoを用いて新規記事を作成したい場合の手順についてメモしたいと思います。 今回の内容は以下のバージョンを用いております。
&amp;gt; hugo version hugo v0.117.0+extended linux/amd64 BuildDate=unknown カスタマイズ前 見出しへのリンク hugoをインストールし、新しいサイトを作るには以下のコマンドを使用します。
hugo new site SiteName テーマを導入したり種々の設定(hugo.toml)の設定を終えた後、そのまま新しい記事を作成する際は、例えば以下のようにして作成できます。
hugo new posts/hoge.md このとき作成された./content/posts/hoge.mdの内容は例えば以下の通りです。
--- title: &amp;#34;Hoge&amp;#34; date: 2023-10-08T12:55:16+09:00 draft: true --- この三つの「-」で囲まれた部分はFront matterと呼ばれる部分で、この変数を用いてページをカスタマイズすることができるようになっています。 ここで定義される変数の意味については、使っているテーマなどにもよって異なると思いますので、使用するテーマに応じて確認して下さい。 Front matter部分は記事本文には反映されず、この次に書かれることが反映されるようになります。
このデフォルトで作成されるファイルは、./archetypes/default.mdによって作成されています。
--- title: &amp;#34;{{ replace .Name &amp;#34;-&amp;#34; &amp;#34; &amp;#34; | title }}&amp;#34; date: {{ .Date }} draft: true --- ここに現れている.Nameや.Dateなどはhugoでアクセスできる変数で、詳細は公式ページを確認して下さい。 つまり、このテンプレートファイルをカスタマイズすることで、自動で記事に必要な情報を加えることができるということになります。
テンプレートファイルの作成 見出しへのリンク ./archetypes/default.mdを変更すれば、全ての記事の初期設定を決めることができますが、作成するページに応じて設定したい内容が異なることがほとんどだと思います。 例えば、ディレクトリを分けて記事(./content/)を書き、posts/以下にブログ、about/以下にプロファイルを記載するといった用途が考えられます。(こちらのサイトもそうなっています。)
そこで、postsディレクトリ以下に作成する記事には、ある特定のテンプレートファイルを使いたいと考えるようになるはずです。 hugoにはデフォルトでそのような機能がついており、./archetypes/ディレクトリ名.mdを作成することで、このテンプレートファイルが初期設定として使われるようになります。
例として、./archetypes/posts.mdを作成して、新たな記事./content/posts/huga.mdを作成する例を見てみたいと思います。 テンプレートファイルposts.mdを以下のように作成します。
--- title: &amp;#34;{{ replace .Name &amp;#34;-&amp;#34; &amp;#34; &amp;#34; | title }}&amp;#34; date: {{ .</description>
    </item>
    <item>
      <title>自己紹介</title>
      <link>https://okawak.github.io/about/</link>
      <pubDate>Sat, 30 Sep 2023 14:24:00 +0900</pubDate>
      <guid>https://okawak.github.io/about/</guid>
      <description>大川皓大(Kodai Okawa) 専攻:物理学 PhD学生 鳥取県出身 ソフトウェア、ハードウェアを問わず技術に関することに興味があります。 まだまだ初心者で知識も拙いですが、学んだことをメモしていきたいと思っています。
このサイトは、github pagesを用いて運用しており、 ソースコードは私のgithubページからも見ることができますが、 hugo + coderのテーマを用いて作成しています。 勉強の意味合いを込め、2023年9月に開設しました。
内容に関して間違っていること、最適ではないことも含まれているかもしれませんが、 勉強中という身ですのでご了承ください。</description>
    </item>
    <item>
      <title>作ったもの</title>
      <link>https://okawak.github.io/products/</link>
      <pubDate>Fri, 29 Sep 2023 14:24:28 +0900</pubDate>
      <guid>https://okawak.github.io/products/</guid>
      <description> 研究関連 見出しへのリンク CRIB Wiki (Notion 内部のみ)
こちらにアクセスするにはメンバーにコンタクトを取ってください。 crib-artemis用の作業ディレクトリ (github)
crib-artemisのマニュアル (github page, hugo)
現在用いられているオンライン解析ソフトウェア artemisの詳細はこちら SRIMlib (github)
SRIMをC++のライブラリにしたもの(SRIMの出力ファイルが必要) send_runsummary (gitlab)
取ったデータのサマリーをgoogle spreadsheetに送るツール crib_daq (gitlab)
CRIBにおいてDAQを動かすのに必要なコードをまとめてレポジトリ化したもの その他 見出しへのリンク shift_maker (github) シフト作成ツール(google form, google spreadsheetと連携) </description>
    </item>
  </channel>
</rss>
